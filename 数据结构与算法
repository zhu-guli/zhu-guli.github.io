程序 = 数据结构 + 算法
### 1 数据结构
- 数据不仅仅包括数值类型，还包括字符及声音、图像、视频等非数值类型。
- 数据项是数据不可分割的最小单位，数据元素由若干个数据项组成，真正讨论问题时一般以数据元素为单位。
- 数据结构:是相互之间存在一种或多种特定关系的数据元素的集合。
#### 1.1数据结构分为逻辑结构和物理结构
##### 逻辑结构:是指数据对象中数据元素之间的相互关系。有四种逻辑结构：
- 集合结构:集合结构中的数据元素除了同属于一个集合内，没有其他关系。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126203657684.png#pic_center)
- 线性结构:线性结构中的数据元素之间是一对一的关系。
![在这里插入图片描述](https://img-blog.csdnimg.cn/2020112620371165.png#pic_center)
- 树形结构:树形结构中的数据元素之间存在一种一对多的层次关系。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126203721141.png#pic_center)
- 图形结构:图形结构的数据元素是多对多的关系
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126203739740.png#pic_center)
##### 物理结构:是指数据的逻辑结构在计算机中的存储形式。有两种存储结构：
- 顺序存储结构:是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126203817815.png#pic_center)
- 链式存储结构:是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。
 ![在这里插入图片描述](https://img-blog.csdnimg.cn/2020112620383155.png#pic_center)
#### 1.2数据类型
- 数据类型是指一组性质相同的值的集合及定义在此集合上的一些操作的总称，用来说明变量或表达式的取值范围和所能进行的操作。
### 2 算法
- 算法是解决特定问题求解步骤的描述,在计算机中表现为指令的有限序列,并且每条指令表示一个或多个操作。
#### 2.1算法的基本特性
- 输入输出特性：零个或者多个输入，至少一个或多个输出。
- 有穷性：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。
- 确定性：算法的每一步骤都具有确定的含义，不会出现二义性。
- 可行性：算法的每-步都必须是可行的，也就是说，每- -步 都能够通过执行有限次数完成。
算法设计的要求：正确性、可读性、健壮性（输入不合法时也能处理）、时间效率高和存储量低。
#### 2.2算法效率的度量方法
- 时间复杂度（运算时间）：执行次数函数的阶级。通常，提到的运行时间都是最坏情况的运行时间。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126203849717.png#pic_center)
- 空间复杂度（存储空间）。
### 3 线性表
线性表(List):零个或多个数据元素的有限序列。线性表元素的个数n定义为线性表的长度，当n=0时，称为空表。在较复杂的线性表中，一个数据元素可以由若干个数据项组成。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126203859629.png#pic_center)
#### 3.1线性表的顺序存储
可以用一维数组来实现线性表的顺序存储结构。在任意时刻,线性表的长度应该小于等于数组的长度。
采用顺序存储结构，优点：无须为表示表中元素之间的逻辑关系而增加额外的存储空间；可以快速地存取表中任位置的元素。缺点：插入和删除操作需要移动大量元素；当线性表长度变化较大时,难以确定存储空间的容量
#### 3.2线性表的链式存储
对第i个数据元素来说，除了存储其本身的信息之外，还需存储第i+1个元素的存储位置。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126203943950.png#pic_center)
 ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126203919955.png#pic_center)
这样的线性表称为单链表，是一种动态结构，可以动态地分配存储的，即在需要时才开辟结点的存储空间，实现动态链接。
若线性表中元素个数变化不大，需要频繁查找，很少进行插入和删除操作时,宜采用顺序存储结构。
#### 3.3静态链表
- 在某些高级语言中，没有指针类型，所以想使用链表，得靠其它手段，比如静态链表。静态链表：线性存储结构的一种，兼顾顺序表和链表的优点，是顺序表和链表的升级；静态链表的数据全部存储在数组中(顺序表)，但存储的位置是随机的，数据直接的一对一关系是通过一个整型变量(称为“游标”，即数组下标，表示直接后继元素所在数组中的位置)维持。我感觉就像是一个包含两种数据的结构体。
- 静态链表中，除了数据本身通过游标组成链表外，还需要有一条连接各个空闲位置的链表，称为备用链表。作用是回收数组中未使用或者之前使用过(现在不用)的存储空间，留待后期使用。
- 一般情况下，cur（游标）为0的元素，作为备用链表的头结点，最后一个元素，也就是最大下标的元素，作为数据链表的头结点。
 ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126203547606.png#pic_center)

通过存储的游标变量3，可以在a[3]中找到元素4的直接后继元素5；通过元素a[3]存储的游标变量6，可在在a[6]中找到元素5的直接后继元素6。
#### 3.4循环链表
- 将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表（ circuar linkedlist)。
#### 3.5双向链表
- 双向链表(double linked list)是在单链表的每个结点中，再设置一个指向其前驱结点的指针域。
### 4 栈
&emsp;栈(stack）是限定仅在表尾（栈顶）进行插入和删除操作的**线性表**。把**允许插入和删除的一端称为栈顶**，另一端称为栈底，不含任何数据元素的栈称为空栈。栈又称为后进先出 (Last In First Out)的线性表，简称LIFO结构。
- 栈的插入操作,叫作进栈(push)，也称压栈、入栈。栈的删除操作,叫作出栈,也有的叫作弹栈(pop)。
#### 4.1栈的顺序存储结构
&emsp;栈的顺序存储只准栈顶进出元素，所以不存在线性表插入和删除时需要移动元素的问题。不过它必须事先确定数组存储空间大小，万一不够用了，就需要编程手段来扩展数组的容量，非常麻烦。
- 栈共享空间。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126211331971.png#pic_center)
栈1有元素进栈，则先top1+1后给数组元素赋值；若栈2有元素进栈，则先top2-1后给数组元素赋值。只要它们俩不见面,两个栈就可以一直使用，两个栈见面之时，也就是两个指针之间相差1时，即 top1 + 1 == top2为栈满。
#### 4.2栈的链式存储结构
栈的链式存储结构，简称为链栈。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126211911247.png#pic_center =160x200)
&emsp;在高级语言中，调用自己和其他函数并没有本质的不同。我们把一个直接调用自己或通过一系列的调用语句间接地调用自己的函数,称做递归函数。
&emsp;简单的说，就是在前行阶段，对于每一层递归，函数的局部变量、参数值以及返回地址都被压入栈中。在退回阶段，位于栈顶的局部变量、参数值和返回地址被弹出，用于返回调用层次中执行代码的其余部分，也就是恢复了调用的状态。
### 5队列
**队列(queue)是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。**
队列是一种先进先出 (First In First Out)的线性表，简称FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126212920744.png#pic_center =650x100)
- 队列的顺序存储结构
&emsp;front指针指向队头元素，rear 指针指向队尾元素的下一个位置，最大尺寸为 QueueSize。
- 头尾相接的队列称为循环队列。
- 队列的链式存储结构
&emsp;队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已,我们把它简称为链队列。
